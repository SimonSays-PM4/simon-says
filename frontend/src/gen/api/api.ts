/* tslint:disable */
/* eslint-disable */
/**
 * SimonSays
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EventCreateUpdateDTO
 */
export interface EventCreateUpdateDTO {
    /**
     * ID for the event
     * @type {number}
     * @memberof EventCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the event
     * @type {string}
     * @memberof EventCreateUpdateDTO
     */
    'name': string;
    /**
     * Event description
     * @type {string}
     * @memberof EventCreateUpdateDTO
     */
    'password': string;
    /**
     * Number of tables available at the event
     * @type {number}
     * @memberof EventCreateUpdateDTO
     */
    'numberOfTables'?: number;
}
/**
 * 
 * @export
 * @interface EventDTO
 */
export interface EventDTO {
    /**
     * ID of the event
     * @type {number}
     * @memberof EventDTO
     */
    'id'?: number;
    /**
     * Name for the event
     * @type {string}
     * @memberof EventDTO
     */
    'name': string;
    /**
     * Password for the event
     * @type {string}
     * @memberof EventDTO
     */
    'password': string;
    /**
     * Number of tables available at the event
     * @type {number}
     * @memberof EventDTO
     */
    'numberOfTables': number;
}
/**
 * 
 * @export
 * @interface IngredientCreateUpdateDTO
 */
export interface IngredientCreateUpdateDTO {
    /**
     * Id for the ingredient
     * @type {number}
     * @memberof IngredientCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof IngredientCreateUpdateDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IngredientDTO
 */
export interface IngredientDTO {
    /**
     * Id for the ingredient
     * @type {number}
     * @memberof IngredientDTO
     */
    'id': number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof IngredientDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MenuCreateUpdateDTO
 */
export interface MenuCreateUpdateDTO {
    /**
     * ID for the menu
     * @type {number}
     * @memberof MenuCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the Menu
     * @type {string}
     * @memberof MenuCreateUpdateDTO
     */
    'name': string;
    /**
     * 
     * @type {Array<MenuItemDTO>}
     * @memberof MenuCreateUpdateDTO
     */
    'menuItems': Array<MenuItemDTO>;
}
/**
 * List of menus
 * @export
 * @interface MenuDTO
 */
export interface MenuDTO {
    /**
     * ID of the menu
     * @type {number}
     * @memberof MenuDTO
     */
    'id': number;
    /**
     * Name for the menu
     * @type {string}
     * @memberof MenuDTO
     */
    'name': string;
    /**
     * List of menu items
     * @type {Array<MenuItemDTO>}
     * @memberof MenuDTO
     */
    'menuItems': Array<MenuItemDTO>;
    /**
     * Price of the menu
     * @type {number}
     * @memberof MenuDTO
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface MenuItemCreateUpdateDTO
 */
export interface MenuItemCreateUpdateDTO {
    /**
     * ID for the menu item
     * @type {number}
     * @memberof MenuItemCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the Menu Item
     * @type {string}
     * @memberof MenuItemCreateUpdateDTO
     */
    'name': string;
    /**
     * 
     * @type {Array<IngredientDTO>}
     * @memberof MenuItemCreateUpdateDTO
     */
    'ingredients': Array<IngredientDTO>;
    /**
     * Price of the menu item
     * @type {number}
     * @memberof MenuItemCreateUpdateDTO
     */
    'price': number;
}
/**
 * List of menu items
 * @export
 * @interface MenuItemDTO
 */
export interface MenuItemDTO {
    /**
     * ID of the menu item
     * @type {number}
     * @memberof MenuItemDTO
     */
    'id': number;
    /**
     * Name for the menu item
     * @type {string}
     * @memberof MenuItemDTO
     */
    'name': string;
    /**
     * List of ingredients
     * @type {Array<IngredientDTO>}
     * @memberof MenuItemDTO
     */
    'ingredients': Array<IngredientDTO>;
    /**
     * Price of the menu item
     * @type {number}
     * @memberof MenuItemDTO
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface OrderCreateDTO
 */
export interface OrderCreateDTO {
    /**
     * List of menus
     * @type {Array<MenuDTO>}
     * @memberof OrderCreateDTO
     */
    'menus'?: Array<MenuDTO>;
    /**
     * List of menu items
     * @type {Array<MenuItemDTO>}
     * @memberof OrderCreateDTO
     */
    'menuItems'?: Array<MenuItemDTO>;
    /**
     * Table number
     * @type {number}
     * @memberof OrderCreateDTO
     */
    'tableNumber'?: number;
    /**
     * indicates if the order is a take away order
     * @type {boolean}
     * @memberof OrderCreateDTO
     */
    'isTakeAway': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderCreateDTO
     */
    'takeAway'?: boolean;
}
/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * Id of order
     * @type {number}
     * @memberof OrderDTO
     */
    'id': number;
    /**
     * List of menus
     * @type {Array<OrderMenuDTO>}
     * @memberof OrderDTO
     */
    'menus'?: Array<OrderMenuDTO>;
    /**
     * List of menu items
     * @type {Array<OrderMenuItemDTO>}
     * @memberof OrderDTO
     */
    'menuItems'?: Array<OrderMenuItemDTO>;
    /**
     * Table number
     * @type {number}
     * @memberof OrderDTO
     */
    'tableNumber': number;
    /**
     * the price of the order
     * @type {number}
     * @memberof OrderDTO
     */
    'totalPrice': number;
    /**
     * 
     * @type {State}
     * @memberof OrderDTO
     */
    'state': State;
    /**
     * indicates if the order is a take away order
     * @type {boolean}
     * @memberof OrderDTO
     */
    'isTakeAway': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderDTO
     */
    'takeAway'?: boolean;
}


/**
 * List of ingredients
 * @export
 * @interface OrderIngredientDTO
 */
export interface OrderIngredientDTO {
    /**
     * Id for the ingredient
     * @type {number}
     * @memberof OrderIngredientDTO
     */
    'id': number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof OrderIngredientDTO
     */
    'name': string;
    /**
     * 
     * @type {State}
     * @memberof OrderIngredientDTO
     */
    'state': State;
}


/**
 * List of menus
 * @export
 * @interface OrderMenuDTO
 */
export interface OrderMenuDTO {
    /**
     * ID of the menu
     * @type {number}
     * @memberof OrderMenuDTO
     */
    'id': number;
    /**
     * Name for the menu
     * @type {string}
     * @memberof OrderMenuDTO
     */
    'name': string;
    /**
     * List of menu items
     * @type {Array<OrderMenuItemDTO>}
     * @memberof OrderMenuDTO
     */
    'menuItems': Array<OrderMenuItemDTO>;
    /**
     * Price of the menu
     * @type {number}
     * @memberof OrderMenuDTO
     */
    'price': number;
    /**
     * 
     * @type {State}
     * @memberof OrderMenuDTO
     */
    'state': State;
}


/**
 * List of menu items
 * @export
 * @interface OrderMenuItemDTO
 */
export interface OrderMenuItemDTO {
    /**
     * ID of the menu item
     * @type {number}
     * @memberof OrderMenuItemDTO
     */
    'id': number;
    /**
     * Name for the menu item
     * @type {string}
     * @memberof OrderMenuItemDTO
     */
    'name': string;
    /**
     * List of ingredients
     * @type {Array<OrderIngredientDTO>}
     * @memberof OrderMenuItemDTO
     */
    'ingredients': Array<OrderIngredientDTO>;
    /**
     * Price of the menu item
     * @type {number}
     * @memberof OrderMenuItemDTO
     */
    'price': number;
    /**
     * 
     * @type {State}
     * @memberof OrderMenuItemDTO
     */
    'state': State;
}


/**
 * the state of the order
 * @export
 * @enum {string}
 */

export const State = {
    InProgress: 'IN_PROGRESS',
    Done: 'DONE'
} as const;

export type State = typeof State[keyof typeof State];


/**
 * 
 * @export
 * @interface StationCreateUpdateDTO
 */
export interface StationCreateUpdateDTO {
    /**
     * ID for the station
     * @type {number}
     * @memberof StationCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the station
     * @type {string}
     * @memberof StationCreateUpdateDTO
     */
    'name': string;
    /**
     * Is the station an assembly station?
     * @type {boolean}
     * @memberof StationCreateUpdateDTO
     */
    'assemblyStation': boolean;
    /**
     * 
     * @type {Array<IngredientDTO>}
     * @memberof StationCreateUpdateDTO
     */
    'ingredients': Array<IngredientDTO>;
}
/**
 * 
 * @export
 * @interface StationDTO
 */
export interface StationDTO {
    /**
     * ID of the ingredient
     * @type {number}
     * @memberof StationDTO
     */
    'id': number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof StationDTO
     */
    'name': string;
    /**
     * Assembly station
     * @type {boolean}
     * @memberof StationDTO
     */
    'assemblyStation': boolean;
    /**
     * List of ingredients
     * @type {Array<IngredientDTO>}
     * @memberof StationDTO
     */
    'ingredients': Array<IngredientDTO>;
}

/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEvent', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEvent', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest-api/v1/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEvent: async (eventCreateUpdateDTO: EventCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreateUpdateDTO' is not null or undefined
            assertParamExists('putEvent', 'eventCreateUpdateDTO', eventCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.deleteEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putEvent(eventCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.putEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEvent(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(eventId: number, options?: any): AxiosPromise<EventDTO> {
            return localVarFp.getEvent(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(options?: any): AxiosPromise<Array<EventDTO>> {
            return localVarFp.getEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: any): AxiosPromise<EventDTO> {
            return localVarFp.putEvent(eventCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete an event
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public deleteEvent(eventId: number, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).deleteEvent(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single event
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEvent(eventId: number, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEvent(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEvents(options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create an event
     * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).putEvent(eventCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IngredientControllerApi - axios parameter creator
 * @export
 */
export const IngredientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIngredient: async (eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('createIngredient', 'eventId', eventId)
            // verify required parameter 'ingredientCreateUpdateDTO' is not null or undefined
            assertParamExists('createIngredient', 'ingredientCreateUpdateDTO', ingredientCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient: async (id: number, eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIngredient', 'id', id)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteIngredient', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient: async (id: number, eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIngredient', 'id', id)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getIngredient', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIngredients: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('listIngredients', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientControllerApi - functional programming interface
 * @export
 */
export const IngredientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIngredient(eventId, ingredientCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.createIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredient(id, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.deleteIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredient(id, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.getIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIngredients(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IngredientDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIngredients(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.listIngredients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IngredientControllerApi - factory interface
 * @export
 */
export const IngredientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: any): AxiosPromise<IngredientDTO> {
            return localVarFp.createIngredient(eventId, ingredientCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient(id: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredient(id, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient(id: number, eventId: number, options?: any): AxiosPromise<IngredientDTO> {
            return localVarFp.getIngredient(id, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIngredients(eventId: number, options?: any): AxiosPromise<Array<IngredientDTO>> {
            return localVarFp.listIngredients(eventId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientControllerApi - object-oriented interface
 * @export
 * @class IngredientControllerApi
 * @extends {BaseAPI}
 */
export class IngredientControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates new ingredient
     * @param {number} eventId 
     * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).createIngredient(eventId, ingredientCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete ingredient
     * @param {number} id 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public deleteIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).deleteIngredient(id, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ingredient
     * @param {number} id 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).getIngredient(id, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of ingredients
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public listIngredients(eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).listIngredients(eventId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MenuControllerApi - axios parameter creator
 * @export
 */
export const MenuControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu: async (eventId: number, menuId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteMenu', 'eventId', eventId)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('deleteMenu', 'menuId', menuId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menu/{menuId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: async (eventId: number, menuId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getMenu', 'eventId', eventId)
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('getMenu', 'menuId', menuId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menu/{menuId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"menuId"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all menus
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getMenus', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menu`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create a menu
         * @param {number} eventId 
         * @param {MenuCreateUpdateDTO} menuCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMenu: async (eventId: number, menuCreateUpdateDTO: MenuCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('putMenu', 'eventId', eventId)
            // verify required parameter 'menuCreateUpdateDTO' is not null or undefined
            assertParamExists('putMenu', 'menuCreateUpdateDTO', menuCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/menu`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuControllerApi - functional programming interface
 * @export
 */
export const MenuControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenu(eventId: number, menuId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenu(eventId, menuId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.deleteMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a single menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenu(eventId: number, menuId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenu(eventId, menuId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.getMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read all menus
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenus(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenus(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.getMenus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create a menu
         * @param {number} eventId 
         * @param {MenuCreateUpdateDTO} menuCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMenu(eventId: number, menuCreateUpdateDTO: MenuCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMenu(eventId, menuCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuControllerApi.putMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenuControllerApi - factory interface
 * @export
 */
export const MenuControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(eventId: number, menuId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMenu(eventId, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single menu
         * @param {number} eventId 
         * @param {number} menuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu(eventId: number, menuId: number, options?: any): AxiosPromise<MenuDTO> {
            return localVarFp.getMenu(eventId, menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all menus
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus(eventId: number, options?: any): AxiosPromise<Array<MenuDTO>> {
            return localVarFp.getMenus(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create a menu
         * @param {number} eventId 
         * @param {MenuCreateUpdateDTO} menuCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMenu(eventId: number, menuCreateUpdateDTO: MenuCreateUpdateDTO, options?: any): AxiosPromise<MenuDTO> {
            return localVarFp.putMenu(eventId, menuCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuControllerApi - object-oriented interface
 * @export
 * @class MenuControllerApi
 * @extends {BaseAPI}
 */
export class MenuControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete a menu
     * @param {number} eventId 
     * @param {number} menuId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public deleteMenu(eventId: number, menuId: number, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).deleteMenu(eventId, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single menu
     * @param {number} eventId 
     * @param {number} menuId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public getMenu(eventId: number, menuId: number, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).getMenu(eventId, menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all menus
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public getMenus(eventId: number, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).getMenus(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create a menu
     * @param {number} eventId 
     * @param {MenuCreateUpdateDTO} menuCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuControllerApi
     */
    public putMenu(eventId: number, menuCreateUpdateDTO: MenuCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return MenuControllerApiFp(this.configuration).putMenu(eventId, menuCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MenuItemControllerApi - axios parameter creator
 * @export
 */
export const MenuItemControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuItem: async (eventId: number, menuItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteMenuItem', 'eventId', eventId)
            // verify required parameter 'menuItemId' is not null or undefined
            assertParamExists('deleteMenuItem', 'menuItemId', menuItemId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menuitem/{menuItemId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"menuItemId"}}`, encodeURIComponent(String(menuItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItem: async (eventId: number, menuItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getMenuItem', 'eventId', eventId)
            // verify required parameter 'menuItemId' is not null or undefined
            assertParamExists('getMenuItem', 'menuItemId', menuItemId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menuitem/{menuItemId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"menuItemId"}}`, encodeURIComponent(String(menuItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all menu items
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItems: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getMenuItems', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/menuitem`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create a menu item
         * @param {number} eventId 
         * @param {MenuItemCreateUpdateDTO} menuItemCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMenuItem: async (eventId: number, menuItemCreateUpdateDTO: MenuItemCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('putMenuItem', 'eventId', eventId)
            // verify required parameter 'menuItemCreateUpdateDTO' is not null or undefined
            assertParamExists('putMenuItem', 'menuItemCreateUpdateDTO', menuItemCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/menuitem`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuItemCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuItemControllerApi - functional programming interface
 * @export
 */
export const MenuItemControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuItemControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMenuItem(eventId: number, menuItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenuItem(eventId, menuItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuItemControllerApi.deleteMenuItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a single menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuItem(eventId: number, menuItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuItem(eventId, menuItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuItemControllerApi.getMenuItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read all menu items
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuItems(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MenuItemDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuItems(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuItemControllerApi.getMenuItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create a menu item
         * @param {number} eventId 
         * @param {MenuItemCreateUpdateDTO} menuItemCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMenuItem(eventId: number, menuItemCreateUpdateDTO: MenuItemCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuItemDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMenuItem(eventId, menuItemCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenuItemControllerApi.putMenuItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenuItemControllerApi - factory interface
 * @export
 */
export const MenuItemControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuItemControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenuItem(eventId: number, menuItemId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMenuItem(eventId, menuItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single menu item
         * @param {number} eventId 
         * @param {number} menuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItem(eventId: number, menuItemId: number, options?: any): AxiosPromise<MenuItemDTO> {
            return localVarFp.getMenuItem(eventId, menuItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all menu items
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItems(eventId: number, options?: any): AxiosPromise<Array<MenuItemDTO>> {
            return localVarFp.getMenuItems(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create a menu item
         * @param {number} eventId 
         * @param {MenuItemCreateUpdateDTO} menuItemCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMenuItem(eventId: number, menuItemCreateUpdateDTO: MenuItemCreateUpdateDTO, options?: any): AxiosPromise<MenuItemDTO> {
            return localVarFp.putMenuItem(eventId, menuItemCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuItemControllerApi - object-oriented interface
 * @export
 * @class MenuItemControllerApi
 * @extends {BaseAPI}
 */
export class MenuItemControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete a menu item
     * @param {number} eventId 
     * @param {number} menuItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuItemControllerApi
     */
    public deleteMenuItem(eventId: number, menuItemId: number, options?: RawAxiosRequestConfig) {
        return MenuItemControllerApiFp(this.configuration).deleteMenuItem(eventId, menuItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single menu item
     * @param {number} eventId 
     * @param {number} menuItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuItemControllerApi
     */
    public getMenuItem(eventId: number, menuItemId: number, options?: RawAxiosRequestConfig) {
        return MenuItemControllerApiFp(this.configuration).getMenuItem(eventId, menuItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all menu items
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuItemControllerApi
     */
    public getMenuItems(eventId: number, options?: RawAxiosRequestConfig) {
        return MenuItemControllerApiFp(this.configuration).getMenuItems(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create a menu item
     * @param {number} eventId 
     * @param {MenuItemCreateUpdateDTO} menuItemCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuItemControllerApi
     */
    public putMenuItem(eventId: number, menuItemCreateUpdateDTO: MenuItemCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return MenuItemControllerApiFp(this.configuration).putMenuItem(eventId, menuItemCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderControllerApi - axios parameter creator
 * @export
 */
export const OrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete an order
         * @param {number} eventId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (eventId: number, orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteOrder', 'eventId', eventId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('deleteOrder', 'orderId', orderId)
            const localVarPath = `/rest-api/v1/event/{eventId}/order/{orderId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get orders
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getOrders', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/order`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create an order
         * @param {number} eventId 
         * @param {OrderCreateDTO} orderCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrder: async (eventId: number, orderCreateDTO: OrderCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('putOrder', 'eventId', eventId)
            // verify required parameter 'orderCreateDTO' is not null or undefined
            assertParamExists('putOrder', 'orderCreateDTO', orderCreateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/order`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update order ingredient state
         * @param {number} eventId 
         * @param {number} orderIngredientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderIngredientState: async (eventId: number, orderIngredientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateOrderIngredientState', 'eventId', eventId)
            // verify required parameter 'orderIngredientId' is not null or undefined
            assertParamExists('updateOrderIngredientState', 'orderIngredientId', orderIngredientId)
            const localVarPath = `/rest-api/v1/event/{eventId}/order/ingredient/{orderIngredientId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"orderIngredientId"}}`, encodeURIComponent(String(orderIngredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update order menu item state
         * @param {number} eventId 
         * @param {number} orderMenuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderMenuItemState: async (eventId: number, orderMenuItemId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateOrderMenuItemState', 'eventId', eventId)
            // verify required parameter 'orderMenuItemId' is not null or undefined
            assertParamExists('updateOrderMenuItemState', 'orderMenuItemId', orderMenuItemId)
            const localVarPath = `/rest-api/v1/event/{eventId}/order/menuitem/{orderMenuItemId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"orderMenuItemId"}}`, encodeURIComponent(String(orderMenuItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update order menu state
         * @param {number} eventId 
         * @param {number} orderMenuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderMenuState: async (eventId: number, orderMenuId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateOrderMenuState', 'eventId', eventId)
            // verify required parameter 'orderMenuId' is not null or undefined
            assertParamExists('updateOrderMenuState', 'orderMenuId', orderMenuId)
            const localVarPath = `/rest-api/v1/event/{eventId}/order/menu/{orderMenuId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"orderMenuId"}}`, encodeURIComponent(String(orderMenuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export const OrderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete an order
         * @param {number} eventId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(eventId: number, orderId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(eventId, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.deleteOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get orders
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.getOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create an order
         * @param {number} eventId 
         * @param {OrderCreateDTO} orderCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOrder(eventId: number, orderCreateDTO: OrderCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOrder(eventId, orderCreateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.putOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update order ingredient state
         * @param {number} eventId 
         * @param {number} orderIngredientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderIngredientState(eventId: number, orderIngredientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderIngredientState(eventId, orderIngredientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.updateOrderIngredientState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update order menu item state
         * @param {number} eventId 
         * @param {number} orderMenuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderMenuItemState(eventId: number, orderMenuItemId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderMenuItemState(eventId, orderMenuItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.updateOrderMenuItemState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update order menu state
         * @param {number} eventId 
         * @param {number} orderMenuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderMenuState(eventId: number, orderMenuId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderMenuState(eventId, orderMenuId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.updateOrderMenuState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderControllerApi - factory interface
 * @export
 */
export const OrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary delete an order
         * @param {number} eventId 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(eventId: number, orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrder(eventId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get orders
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(eventId: number, options?: any): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.getOrders(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create an order
         * @param {number} eventId 
         * @param {OrderCreateDTO} orderCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOrder(eventId: number, orderCreateDTO: OrderCreateDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.putOrder(eventId, orderCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update order ingredient state
         * @param {number} eventId 
         * @param {number} orderIngredientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderIngredientState(eventId: number, orderIngredientId: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateOrderIngredientState(eventId, orderIngredientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update order menu item state
         * @param {number} eventId 
         * @param {number} orderMenuItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderMenuItemState(eventId: number, orderMenuItemId: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateOrderMenuItemState(eventId, orderMenuItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update order menu state
         * @param {number} eventId 
         * @param {number} orderMenuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderMenuState(eventId: number, orderMenuId: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateOrderMenuState(eventId, orderMenuId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
export class OrderControllerApi extends BaseAPI {
    /**
     * 
     * @summary delete an order
     * @param {number} eventId 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public deleteOrder(eventId: number, orderId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).deleteOrder(eventId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get orders
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getOrders(eventId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).getOrders(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create an order
     * @param {number} eventId 
     * @param {OrderCreateDTO} orderCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public putOrder(eventId: number, orderCreateDTO: OrderCreateDTO, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).putOrder(eventId, orderCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update order ingredient state
     * @param {number} eventId 
     * @param {number} orderIngredientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateOrderIngredientState(eventId: number, orderIngredientId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).updateOrderIngredientState(eventId, orderIngredientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update order menu item state
     * @param {number} eventId 
     * @param {number} orderMenuItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateOrderMenuItemState(eventId: number, orderMenuItemId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).updateOrderMenuItemState(eventId, orderMenuItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update order menu state
     * @param {number} eventId 
     * @param {number} orderMenuId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateOrderMenuState(eventId: number, orderMenuId: number, options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).updateOrderMenuState(eventId, orderMenuId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StationControllerApi - axios parameter creator
 * @export
 */
export const StationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStation: async (eventId: number, stationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteStation', 'eventId', eventId)
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('deleteStation', 'stationId', stationId)
            const localVarPath = `/rest-api/v1/event/{eventId}/station/{stationId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStation: async (eventId: number, stationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getStation', 'eventId', eventId)
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('getStation', 'stationId', stationId)
            const localVarPath = `/rest-api/v1/event/{eventId}/station/{stationId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all stations
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStations: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getStations', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/station`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create a station
         * @param {number} eventId 
         * @param {StationCreateUpdateDTO} stationCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStation: async (eventId: number, stationCreateUpdateDTO: StationCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('putStation', 'eventId', eventId)
            // verify required parameter 'stationCreateUpdateDTO' is not null or undefined
            assertParamExists('putStation', 'stationCreateUpdateDTO', stationCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/station`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stationCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StationControllerApi - functional programming interface
 * @export
 */
export const StationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStation(eventId: number, stationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStation(eventId, stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.deleteStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a single station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStation(eventId: number, stationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStation(eventId, stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.getStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read all stations
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStations(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StationDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStations(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.getStations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create a station
         * @param {number} eventId 
         * @param {StationCreateUpdateDTO} stationCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStation(eventId: number, stationCreateUpdateDTO: StationCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putStation(eventId, stationCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.putStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StationControllerApi - factory interface
 * @export
 */
export const StationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStation(eventId: number, stationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStation(eventId, stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single station
         * @param {number} eventId 
         * @param {number} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStation(eventId: number, stationId: number, options?: any): AxiosPromise<StationDTO> {
            return localVarFp.getStation(eventId, stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all stations
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStations(eventId: number, options?: any): AxiosPromise<Array<StationDTO>> {
            return localVarFp.getStations(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create a station
         * @param {number} eventId 
         * @param {StationCreateUpdateDTO} stationCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStation(eventId: number, stationCreateUpdateDTO: StationCreateUpdateDTO, options?: any): AxiosPromise<StationDTO> {
            return localVarFp.putStation(eventId, stationCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StationControllerApi - object-oriented interface
 * @export
 * @class StationControllerApi
 * @extends {BaseAPI}
 */
export class StationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete a station
     * @param {number} eventId 
     * @param {number} stationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public deleteStation(eventId: number, stationId: number, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).deleteStation(eventId, stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single station
     * @param {number} eventId 
     * @param {number} stationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public getStation(eventId: number, stationId: number, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).getStation(eventId, stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all stations
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public getStations(eventId: number, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).getStations(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create a station
     * @param {number} eventId 
     * @param {StationCreateUpdateDTO} stationCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public putStation(eventId: number, stationCreateUpdateDTO: StationCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).putStation(eventId, stationCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



