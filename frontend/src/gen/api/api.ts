/* tslint:disable */
/* eslint-disable */
/**
 * SimonSays
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EventCreateUpdateDTO
 */
export interface EventCreateUpdateDTO {
    /**
     * ID for the event
     * @type {number}
     * @memberof EventCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the event
     * @type {string}
     * @memberof EventCreateUpdateDTO
     */
    'name': string;
    /**
     * Event description
     * @type {string}
     * @memberof EventCreateUpdateDTO
     */
    'password': string;
    /**
     * Number of tables available at the event
     * @type {number}
     * @memberof EventCreateUpdateDTO
     */
    'numberOfTables'?: number;
}
/**
 * 
 * @export
 * @interface EventDTO
 */
export interface EventDTO {
    /**
     * Name for the event
     * @type {string}
     * @memberof EventDTO
     */
    'name': string;
    /**
     * Password for the event
     * @type {string}
     * @memberof EventDTO
     */
    'password': string;
    /**
     * Number of tables available at the event
     * @type {number}
     * @memberof EventDTO
     */
    'numberOfTables': number;
    /**
     * ID of the event
     * @type {number}
     * @memberof EventDTO
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface HealthDTO
 */
export interface HealthDTO {
    /**
     * Shows the state of the application.
     * @type {string}
     * @memberof HealthDTO
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface IngredientCreateUpdateDTO
 */
export interface IngredientCreateUpdateDTO {
    /**
     * Id for the ingredient
     * @type {number}
     * @memberof IngredientCreateUpdateDTO
     */
    'id'?: number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof IngredientCreateUpdateDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IngredientDTO
 */
export interface IngredientDTO {
    /**
     * Id for the ingredient
     * @type {number}
     * @memberof IngredientDTO
     */
    'id': number;
    /**
     * Name for the ingredient
     * @type {string}
     * @memberof IngredientDTO
     */
    'name': string;
}

/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEvent', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEvent', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest-api/v1/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEvent: async (eventCreateUpdateDTO: EventCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreateUpdateDTO' is not null or undefined
            assertParamExists('putEvent', 'eventCreateUpdateDTO', eventCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.deleteEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.getEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putEvent(eventCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventControllerApi.putEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete an event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEvent(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single event
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(eventId: number, options?: any): AxiosPromise<EventDTO> {
            return localVarFp.getEvent(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(options?: any): AxiosPromise<Array<EventDTO>> {
            return localVarFp.getEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update/Create an event
         * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: any): AxiosPromise<EventDTO> {
            return localVarFp.putEvent(eventCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
    /**
     * 
     * @summary Delete an event
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public deleteEvent(eventId: number, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).deleteEvent(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single event
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEvent(eventId: number, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEvent(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEvents(options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update/Create an event
     * @param {EventCreateUpdateDTO} eventCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public putEvent(eventCreateUpdateDTO: EventCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).putEvent(eventCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthControllerApi - axios parameter creator
 * @export
 */
export const HealthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary shows health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthControllerApi - functional programming interface
 * @export
 */
export const HealthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary shows health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async health(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthControllerApi.health']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthControllerApi - factory interface
 * @export
 */
export const HealthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary shows health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options?: any): AxiosPromise<HealthDTO> {
            return localVarFp.health(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthControllerApi - object-oriented interface
 * @export
 * @class HealthControllerApi
 * @extends {BaseAPI}
 */
export class HealthControllerApi extends BaseAPI {
    /**
     * 
     * @summary shows health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthControllerApi
     */
    public health(options?: RawAxiosRequestConfig) {
        return HealthControllerApiFp(this.configuration).health(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IngredientControllerApi - axios parameter creator
 * @export
 */
export const IngredientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIngredient: async (eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('createIngredient', 'eventId', eventId)
            // verify required parameter 'ingredientCreateUpdateDTO' is not null or undefined
            assertParamExists('createIngredient', 'ingredientCreateUpdateDTO', ingredientCreateUpdateDTO)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientCreateUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient: async (id: number, eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIngredient', 'id', id)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteIngredient', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient: async (id: number, eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIngredient', 'id', id)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getIngredient', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIngredients: async (eventId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('listIngredients', 'eventId', eventId)
            const localVarPath = `/rest-api/v1/event/{eventId}/ingredient`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientControllerApi - functional programming interface
 * @export
 */
export const IngredientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIngredient(eventId, ingredientCreateUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.createIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredient(id, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.deleteIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredient(id, eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.getIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIngredients(eventId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IngredientDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIngredients(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IngredientControllerApi.listIngredients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IngredientControllerApi - factory interface
 * @export
 */
export const IngredientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates new ingredient
         * @param {number} eventId 
         * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: any): AxiosPromise<IngredientDTO> {
            return localVarFp.createIngredient(eventId, ingredientCreateUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient(id: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredient(id, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ingredient
         * @param {number} id 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient(id: number, eventId: number, options?: any): AxiosPromise<IngredientDTO> {
            return localVarFp.getIngredient(id, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of ingredients
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIngredients(eventId: number, options?: any): AxiosPromise<Array<IngredientDTO>> {
            return localVarFp.listIngredients(eventId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientControllerApi - object-oriented interface
 * @export
 * @class IngredientControllerApi
 * @extends {BaseAPI}
 */
export class IngredientControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates new ingredient
     * @param {number} eventId 
     * @param {IngredientCreateUpdateDTO} ingredientCreateUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public createIngredient(eventId: number, ingredientCreateUpdateDTO: IngredientCreateUpdateDTO, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).createIngredient(eventId, ingredientCreateUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete ingredient
     * @param {number} id 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public deleteIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).deleteIngredient(id, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ingredient
     * @param {number} id 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredient(id: number, eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).getIngredient(id, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of ingredients
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public listIngredients(eventId: number, options?: RawAxiosRequestConfig) {
        return IngredientControllerApiFp(this.configuration).listIngredients(eventId, options).then((request) => request(this.axios, this.basePath));
    }
}



